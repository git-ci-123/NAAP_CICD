name: Liquibase Migration

on:
  workflow_dispatch:
    inputs:
      base_path:
        description: "Base path in releasemanagement branch (e.g., Release/2305)"
        required: true
        type: string

env:
  TARGET_REPO: "git-ci-123/NAAP_PROJECT"
  PROPERTIES_BRANCH: "dev-properties"
  RELEASE_BRANCH: "releasemanagement"
  SCRIPT_BRANCH: "dev-script"

jobs:
  liquibase-migration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CICD Repository
        uses: actions/checkout@v4

      - name: Checkout Release Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          token: ${{ secrets.PAT_TOKEN }}
          ref: ${{ env.RELEASE_BRANCH }}
          path: 'NAAP_Release'

      - name: Validate Base Path in Release Branch
        run: |
          BASE_PATH="NAAP_Release/${{ github.event.inputs.base_path }}"
          if [ ! -d "$BASE_PATH" ]; then
            echo "‚ùå Error: Base path $BASE_PATH not found!"
            exit 1
          fi
          echo "BASE_PATH=$BASE_PATH" >> $GITHUB_ENV
          echo "‚úÖ Base path $BASE_PATH found."

      - name: Extract Release Folder from input.txt
        id: read_input
        run: |
          RELEASE_FOLDER=$(sed -n '/^\[DB\]/ {n; p;}' "$BASE_PATH/input.txt" | tr -d '\r')
          if [ -z "$RELEASE_FOLDER" ]; then
            echo "‚ùå Error: Could not extract release folder!"
            exit 1
          fi
          echo "RELEASE_FOLDER=$RELEASE_FOLDER" >> $GITHUB_ENV
          echo "‚úÖ Extracted release folder: $RELEASE_FOLDER."

      - name: Checkout DB Scripts Branch
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          token: ${{ secrets.PAT_TOKEN }}
          ref: ${{ env.SCRIPT_BRANCH }}
          path: 'NAAP_DB'

      - name: Validate Release Folder in DB Scripts Branch
        run: |
          DB_SCRIPTS_PATH="NAAP_DB/$RELEASE_FOLDER"
          if [ ! -d "$DB_SCRIPTS_PATH" ]; then
            echo "‚ùå Error: Release folder $RELEASE_FOLDER not found in db-scripts branch!"
            exit 1
          fi
          echo "‚úÖ Release folder $RELEASE_FOLDER found in db-scripts branch."

      - name: Run Liquibase Migration for All Schemas
        env:
          LIQUIBASE_COMMAND_URL: ${{ secrets.DB_DEV_URL }}
          DB_USER_APPCATALOG: ${{ secrets.APPCATALOG_DEV_USER }}
          DB_PASSWORD_APPCATALOG: ${{ secrets.APPCATALOG_DEV_PASSWD }}
          DB_USER_BACATALOG: ${{ secrets.BACATALOG_DEV_USER }}
          DB_PASSWORD_BACATALOG: ${{ secrets.BACATALOG_DEV_PASSWD }}
          DB_USER_CATALOG: ${{ secrets.CATALOG_DEV_USER }}
          DB_PASSWORD_CATALOG: ${{ secrets.CATALOG_DEV_PASSWD }}
        run: |
          RELEASE_PATH="NAAP_DB/$RELEASE_FOLDER"
          echo "üöÄ Processing release: $RELEASE_FOLDER"

          find "$RELEASE_PATH" -maxdepth 1 -mindepth 1 -type d | sort | while read -r schema_folder; do
            SCHEMA_FULL_NAME=$(basename "$schema_folder")
            SCHEMA_NAME=$(echo "$SCHEMA_FULL_NAME" | cut -d'_' -f2)

            SCHEMA_USER_VAR="DB_USER_${SCHEMA_NAME}"
            SCHEMA_PASS_VAR="DB_PASSWORD_${SCHEMA_NAME}"

            SCHEMA_USER="${!SCHEMA_USER_VAR}"
            SCHEMA_PASS="${!SCHEMA_PASS_VAR}"

            if [ -z "$SCHEMA_USER" ] || [ -z "$SCHEMA_PASS" ]; then
              echo "‚ùå Error: Missing credentials for schema $SCHEMA_NAME. Failing pipeline!"
              exit 1
            fi

            echo "‚úÖ Found schema: $SCHEMA_NAME"

            CHANGELOG_FILE=$(find "$schema_folder" -maxdepth 1 -name "*-changelog.xml" | head -n 1)
            if [ -z "$CHANGELOG_FILE" ]; then
              echo "‚ùå Error: No changelog file found in $schema_folder!"
              exit 1
            fi

            echo "üìÇ Running Liquibase for schema $SCHEMA_NAME | Changelog: $(basename $CHANGELOG_FILE)"

            liquibase --url="$LIQUIBASE_COMMAND_URL" --username="$SCHEMA_USER" --password="$SCHEMA_PASS" \
              --changeLogFile="$CHANGELOG_FILE" update
          done
