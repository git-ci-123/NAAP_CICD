name: Dev Release Management
on:
  workflow_dispatch:
    inputs:
      release:
        description: "Release Path"
        required: true
        type: string
env:

  #REPO AND BRANCHES
  TARGET_REPO: "git-ci-123/NAAP_PROJECT"  # Change to your actual repo.
  PROPERTIES_BRANCH: "dev-properties"     # Branch where property files are stored.
  RELEASE_BRANCH: "releasemanagement"     # Branch where the release folder is stored.
  MANIFEST_BRANCH: "dev-manifest"         # Branch where the manifest files are stored.
  SCRIPT_BRANCH: "dev-script"             # Branch where the DB scripts are stored.

  #DB DETAILS
  LIQUIBASE_COMMAND_URL: ${{ secrets.DB_DEV_URL }}
  
  DB_USER_APPCATALOG: ${{ secrets.APPCATALOG_DEV_USER }}
  DB_PASSWORD_APPCATALOG: ${{ secrets.APPCATALOG_DEV_PASSWD }}
  
  DB_USER_BACATALOG: ${{ secrets.BACATALOG_DEV_USER }}
  DB_PASSWORD_BACATALOG: ${{ secrets.BACATALOG_DEV_PASSWD }}
  
  DB_USER_CA: ${{ secrets.CA_DEV_USER }}
  DB_PASSWORD_CA: ${{ secrets.CA_DEV_PASSWD }}

  DB_USER_CDM: ${{ secrets.CDM_DEV_USER }}
  DB_PASSWORD_CDM: ${{ secrets.CDM_DEV_PASSWD }}

  DB_USER_CIF: ${{ secrets.CIF_DEV_USER }}
  DB_PASSWORD_CIF: ${{ secrets.CIF_DEV_PASSWD }}

  DB_USER_CRDM: ${{ secrets.CRDM_DEV_USER }}
  DB_PASSWORD_CRDM: ${{ secrets.CRDM_DEV_PASSWD }}

  DB_USER_CRF: ${{ secrets.CRF_DEV_USER }}
  DB_PASSWORD_CRF: ${{ secrets.CRF_DEV_PASSWD }}

  DB_USER_CRPT: ${{ secrets.CRPT_DEV_USER }}
  DB_PASSWORD_CRPT: ${{ secrets.CRPT_DEV_PASSWD }}

  DB_USER_GALAXY_SHIELD: ${{ secrets.GALAXY_SHIELD_DEV_USER }}
  DB_PASSWORD_GALAXY_SHIELD: ${{ secrets.GALAXY_SHIELD_DEV_PASSWD }}

  DB_USER_GS_AUDITLOG_REPORT: ${{ secrets.GS_AUDITLOG_REPORT_DEV_USER }}
  DB_PASSWORD_GS_AUDITLOG_REPORT: ${{ secrets.GS_AUDITLOG_REPORT_DEV_PASSWD }}

  

  DB_USER_HISTORYS: ${{ secrets.HISTORYS_DEV_USER }}
  DB_PASSWORD_HISTORYS: ${{ secrets.HISTORYS_DEV_PASSWD }}

  DB_USER_NOTES: ${{ secrets.NOTES_DEV_USER }}
  DB_PASSWORD_NOTES: ${{ secrets.NOTES_DEV_PASSWD }}

  

  


jobs:    
  TaskPlan_Validation:
    runs-on: ubuntu-latest
    outputs:
      iteration: ${{ steps.extract.outputs.ITERATION }}
      imagetag: ${{ steps.extract.outputs.IMAGETAG }}
      db: ${{ steps.extract.outputs.DB }}
      property: ${{ steps.check_properties.outputs.property }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          repository:  ${{ env.TARGET_REPO }}
          token: ${{ secrets.PAT_TOKEN }}    
          ref: ${{ env.RELEASE_BRANCH }}
          path: 'NAAP_Release'
      
      - name: Validate TaskPlan.txt format
        id: validate
        run: |
          release_folder="${{ github.event.inputs.release_folder }}"
          file="${release_folder}/TaskPlan.txt"

          if [ ! -f "$file" ]; then
            echo "ERROR: TaskPlan.txt file not found at $file"
            exit 1
          fi

          # Helper to extract section lines
          get_section() {
            awk -v sec="$1" '
            $0 ~ "\\[" sec "\\]" {flag=1; next}
            /^\[/ {flag=0}
            flag==1 && NF > 0 {print $0}
            ' "$file"
          }

          # Check section order
          headers=$(grep -oP '^\[\w+\]' "$file" | tr -d '[]' | tr '\n' ',' | sed 's/,$//')
          if [ "$headers" != "IMAGETAG,DB,PROPERTY" ]; then
            echo "ERROR: Sections must be exactly [IMAGETAG], [DB], [PROPERTY] in this order."
            echo "Found sections: $headers"
            exit 1
          fi

          imgtags=$(get_section IMAGETAG)
          dbtags=$(get_section DB)
          props=$(get_section PROPERTY)

          # Determine which sections are empty
          if [ -z "$imgtags" ]; then
            echo "skip_image=true" >> $GITHUB_OUTPUT
          else
            echo "skip_image=false" >> $GITHUB_OUTPUT
          fi

          if [ -z "$dbtags" ]; then
            echo "skip_db=true" >> $GITHUB_OUTPUT
          else
            echo "skip_db=false" >> $GITHUB_OUTPUT
          fi

          if [ -z "$props" ]; then
            echo "skip_property=true" >> $GITHUB_OUTPUT
          else
            echo "skip_property=false" >> $GITHUB_OUTPUT
          fi

          echo "Validation complete."
          echo "[IMAGETAG] skip: $([[ -z "$imgtags" ]] && echo true || echo false)"
          echo "[DB] skip: $([[ -z "$dbtags" ]] && echo true || echo false)"
          echo "[PROPERTY] skip: $([[ -z "$props" ]] && echo true || echo false)"
 
      
