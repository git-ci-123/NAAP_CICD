name: Cleanslate Execution

on:
  workflow_dispatch:
    inputs:
      release:
        description: "Release Path"
        required: true
        type: string

jobs:
  checkout:
    runs-on: naap
    outputs:
      iteration: ${{ steps.extract.outputs.ITERATION }}
      imagetag: ${{ steps.extract.outputs.IMAGETAG }}
      db: ${{ steps.extract.outputs.DB }}
      property: ${{ steps.check_properties.outputs.property }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Checkout Project Repository
        uses: actions/checkout@v2
        with:
          repository: 'git-ci-123/NAAP_PROJECT'
          token: ${{ secrets.GITHUB_TOKEN }}    
          ref: releasemanagement
          path: 'NAAP_Release'

      - name: Read Inputs from File
        id: extract
        run: |
          ls -ltr
          RELEASE_VERSION=${{ inputs.release }}
          FILE_PATH="NAAP_Release/${RELEASE_VERSION}/input.txt"

          if [ ! -f "$FILE_PATH" ]; then
            echo "File not found: $FILE_PATH"
            exit 1
          fi

          ITERATION=$(awk '/\[ITERATION\]/{getline; print}' $FILE_PATH | tr -d '[:space:]')
          IMAGETAG=$(awk '/\[IMAGETAG\]/ {flag=1; next} /\[DB\]/ {flag=0} flag' $FILE_PATH | tr '\n' ',' | sed 's/,$//')
          DB=$(awk '/\[DB\]/{getline; print}' $FILE_PATH | tr -d '[:space:]')

          echo "ITERATION=$ITERATION"
          echo "IMAGETAG=$IMAGETAG"
          echo "DB=$DB"

          echo "ITERATION=$ITERATION" >> $GITHUB_OUTPUT
          echo "IMAGETAG=$IMAGETAG" >> $GITHUB_OUTPUT
          echo "DB=$DB" >> $GITHUB_OUTPUT
          
      - name: Check for properties Files
        id: check_properties
        run: |
          PROP_FILES=$(find NAAP_Release/${{ inputs.release }} -type f -name "*.properties" | wc -l)

          if [ "$PROP_FILES" -gt 0 ]; then
            echo "Properties files found: $PROP_FILES"
            echo "property=true" >> $GITHUB_OUTPUT
          else
            echo "No properties files found"
            echo "property=" >> $GITHUB_OUTPUT
          fi

  DB_Execution:
    needs: checkout
    runs-on: naap
    if: ${{ needs.checkout.outputs.db != '' }}
    steps:
      - name: Check RDS Instance Connection
        run: |
          sudo apt-get update && sudo apt-get install -y telnet
          if telnet naapdev.cric42eckumc.us-east-2.rds.amazonaws.com 1521; then
            echo "Connection successful!"
          else
            echo "Connection failed!"
            exit 1
          fi

  Property_deployment:
    needs: 
      - checkout
      - DB_Execution
    runs-on: naap
    if: |
      (needs.checkout.outputs.property == 'true' && needs.DB_Execution.result == 'success')
    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          ref: ${{ env.PROPERTIES_BRANCH }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Fetch and Checkout Release Folder from Target Repo
        run: |
          BASE_PATH="${{ github.event.inputs.BASE_PATH }}"
          RELEASE_BRANCH="${{ env.RELEASE_BRANCH }}"

          echo "Fetching release branch: $RELEASE_BRANCH from ${{ env.TARGET_REPO }}"
          git fetch origin "$RELEASE_BRANCH" || { echo "::error::Branch $RELEASE_BRANCH not found!"; exit 1; }

          echo "Checking out release folder from branch: $RELEASE_BRANCH"
          git checkout origin/"$RELEASE_BRANCH" -- "$BASE_PATH" || { echo "::error::Release folder not found in $RELEASE_BRANCH!"; exit 1; }

          [ -d "$BASE_PATH" ] || { echo "::error::[ERROR] Release folder does not exist: $BASE_PATH"; exit 1; }

      - name: Process Property File Changes
        run: |
          BASE_PATH="${{ github.event.inputs.BASE_PATH }}"
          LOG_FILE="property_changes.log"

          echo "Processing property file changes from $BASE_PATH..." > "$LOG_FILE"

          find "$BASE_PATH" -type f -name "*.properties" | while read -r RELEASE_FILE; do
            FILE_NAME=$(basename "$RELEASE_FILE")  # Get the file name (e.g., "config.properties")
            PROPERTY_FILE="$FILE_NAME"  # Matching file in the properties branch

            # If the file does not exist, create a new one
            if [ ! -f "$PROPERTY_FILE" ]; then
              echo "[CREATE] Creating new property file: $PROPERTY_FILE" | tee -a "$LOG_FILE"
              cp "$RELEASE_FILE" "$PROPERTY_FILE"
            fi

            TEMP_FILE="${PROPERTY_FILE}.tmp"
            cp "$PROPERTY_FILE" "$TEMP_FILE"

            SECTION=""
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^# ]] && continue

              case "$line" in
                "[ADD]") SECTION="ADD"; continue ;;
                "[UPDATE]") SECTION="UPDATE"; continue ;;
                "[REMOVE]") SECTION="REMOVE"; continue ;;
              esac

              KEY=$(echo "$line" | cut -d= -f1)
              VALUE=$(echo "$line" | cut -d= -f2-)

              case "$SECTION" in
                "ADD")
                  if grep -q "^$KEY=" "$TEMP_FILE"; then
                    echo "::error::[ERROR] Key '$KEY' already exists in $PROPERTY_FILE, ADD operation failed!" | tee -a "$LOG_FILE"
                    exit 1
                  fi
                  echo "$line" >> "$TEMP_FILE"
                  echo "[ADD] $KEY=$VALUE -> Added to $PROPERTY_FILE" | tee -a "$LOG_FILE"
                  ;;
                "UPDATE")
                  if grep -q "^$KEY=" "$TEMP_FILE"; then
                    OLD_VALUE=$(grep "^$KEY=" "$TEMP_FILE" | cut -d= -f2-)
                    if [[ "$OLD_VALUE" == "$VALUE" ]]; then
                      echo "::error::[ERROR] Key '$KEY' already has the same value in $PROPERTY_FILE, UPDATE operation failed!" | tee -a "$LOG_FILE"
                      exit 1
                    else
                      sed -i "s|^$KEY=.*|$KEY=$VALUE|" "$TEMP_FILE"
                      echo "[UPDATE] $KEY: '$OLD_VALUE' -> '$VALUE' in $PROPERTY_FILE" | tee -a "$LOG_FILE"
                    fi
                  else
                    echo "::error::[ERROR] Key '$KEY' not found in $PROPERTY_FILE, UPDATE operation failed!" | tee -a "$LOG_FILE"
                    exit 1
                  fi
                  ;;
                "REMOVE")
                  if grep -q "^$KEY=" "$TEMP_FILE"; then
                    sed -i "/^$KEY=/d" "$TEMP_FILE"
                    echo "[REMOVE] $KEY removed from $PROPERTY_FILE" | tee -a "$LOG_FILE"
                  else
                    echo "::error::[ERROR] Key '$KEY' not found in $PROPERTY_FILE, REMOVE operation failed!" | tee -a "$LOG_FILE"
                    exit 1
                  fi
                  ;;
              esac
            done < "$RELEASE_FILE"

            mv "$TEMP_FILE" "$PROPERTY_FILE"
          done

      - name: Display Logs
        run: cat property_changes.log

      - name: Remove Release Folder Before Commit
        run: |
          BASE_PATH="${{ github.event.inputs.BASE_PATH }}"
          [ -d "$BASE_PATH" ] && git rm -rf --cached "$BASE_PATH" || echo "Folder not tracked, skipping removal"
          rm -rf "$BASE_PATH"

      - name: Commit and Push Changes to Target Repo
        run: |
          git add -u
          if git diff --cached --quiet; then
            echo "No changes detected, skipping commit."
            exit 0
          fi
          git commit -m "Updated properties from release folder: ${{ github.event.inputs.BASE_PATH }}"
          git push origin "${{ env.PROPERTIES_BRANCH }}" || { echo "::error::Push failed!"; exit 1; }

