name: CI/CD - Update Properties and Deploy App

on:
  workflow_dispatch:
    inputs:
      BASE_PATH:
        description: "Base path for the release folder"
        required: true
        type: string

env:
  TARGET_REPO: "git-ci-123/NAAP_PROJECT"
  PROJECT_REPO: "git-ci-123/NAAP_PROJECT"
  PROPERTIES_BRANCH: "dev-properties"
  RELEASE_BRANCH: "releasemanagement"
  MANIFEST_BRANCH: "dev-manifest"

jobs:
  extract_data:
    runs-on: ubuntu-latest
    outputs:
      imagetag: ${{ steps.extract.outputs.IMAGETAG }}
    steps:
      - name: Checkout Release Management Branch
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PROJECT_REPO }}
          ref: ${{ env.RELEASE_BRANCH }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Validate BASE_PATH
        run: |
          BASE_PATH="${{ github.event.inputs.BASE_PATH }}"
          if [ ! -d "$BASE_PATH" ]; then
            echo "::error::[ERROR] Release folder does not exist: $BASE_PATH"
            exit 1
          fi

      - name: Extract ImageTag from input.txt
        id: extract
        run: |
          FILE_PATH="${{ github.event.inputs.BASE_PATH }}/input.txt"
          if [[ ! -f "$FILE_PATH" ]]; then
            echo "::error:: input.txt not found in $FILE_PATH"
            exit 1
          fi

          IMAGETAG=$(awk '/\[IMAGETAG\]/ {flag=1; next} /\[DB\]/ {flag=0} flag' "$FILE_PATH" | sed '/^$/d')

          if [[ -z "$IMAGETAG" ]]; then
            echo "::error:: No ImageTag found in input.txt"
            exit 1
          fi

          echo "IMAGETAG=$IMAGETAG" >> $GITHUB_ENV
          echo "IMAGETAG=${IMAGETAG}" >> $GITHUB_OUTPUT

  update_properties:
    needs: extract_data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Properties Branch
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          ref: ${{ env.PROPERTIES_BRANCH }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Process Property File Changes
        run: |
          BASE_PATH="${{ github.event.inputs.BASE_PATH }}"
          LOG_FILE="property_changes.log"

          find "$BASE_PATH" -type f -name "*.properties" | while read -r RELEASE_FILE; do
            FILE_NAME=$(basename "$RELEASE_FILE")
            PROPERTY_FILE="$FILE_NAME"

            if [ ! -f "$PROPERTY_FILE" ]; then
              cp "$RELEASE_FILE" "$PROPERTY_FILE"
            fi

            TEMP_FILE="${PROPERTY_FILE}.tmp"
            cp "$PROPERTY_FILE" "$TEMP_FILE"

            SECTION=""
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^# ]] && continue

              case "$line" in
                "[ADD]") SECTION="ADD"; continue ;;
                "[UPDATE]") SECTION="UPDATE"; continue ;;
                "[REMOVE]") SECTION="REMOVE"; continue ;;
              esac

              KEY=$(echo "$line" | cut -d= -f1)
              VALUE=$(echo "$line" | cut -d= -f2-)

              case "$SECTION" in
                "ADD")
                  if grep -q "^$KEY=" "$TEMP_FILE"; then
                    exit 1
                  fi
                  echo "$line" >> "$TEMP_FILE"
                  ;;
                "UPDATE")
                  if grep -q "^$KEY=" "$TEMP_FILE"; then
                    OLD_VALUE=$(grep "^$KEY=" "$TEMP_FILE" | cut -d= -f2-)
                    sed -i "s|^$KEY=.*|$KEY=$VALUE|" "$TEMP_FILE"
                  else
                    exit 1
                  fi
                  ;;
                "REMOVE")
                  if grep -q "^$KEY=" "$TEMP_FILE"; then
                    sed -i "/^$KEY=/d" "$TEMP_FILE"
                  else
                    exit 1
                  fi
                  ;;
              esac
            done < "$RELEASE_FILE"

            mv "$TEMP_FILE" "$PROPERTY_FILE"
          done

      - name: Commit and Push Changes
        run: |
          git add -u
          if git diff --cached --quiet; then
            echo "No changes detected, skipping commit."
            exit 0
          fi
          git commit -m "Updated properties from release folder"
          git push origin "${{ env.PROPERTIES_BRANCH }}" || exit 1

  deploy_application:
    needs: extract_data
    runs-on: ubuntu-latest
    if: needs.extract_data.outputs.imagetag != ''
    steps:
      - name: Checkout Dev Manifest
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PROJECT_REPO }}
          ref: ${{ env.MANIFEST_BRANCH }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Update Kubernetes Manifests
        run: |
          echo "Updating manifests using extracted ImageTag..."
          echo "$IMAGETAG" | while read IMAGE; do
            [[ -z "$IMAGE" ]] && continue
            SERVICE=$(echo $IMAGE | cut -d'_' -f1)
            TAG=$(echo $IMAGE | cut -d'_' -f2)
            YAML_FILE="manifest/${SERVICE}.yaml"

            if [ -f "$YAML_FILE" ]; then
              echo "Updating $YAML_FILE with image tag $TAG"
              sed -i "s|{{imagetag}}|$TAG|g" "$YAML_FILE"
            else
              echo "::warning:: YAML file not found for service: $SERVICE"
            fi
          done

      - name: Apply Manifests
        run: kubectl apply -f manifest/
