name: Liquibase Migration
 
on:
  workflow_dispatch:
    inputs:
      base_path:
        description: "Base path in releasemanagement branch (e.g., Release/2305)"
        required: true
        type: string

env:
  TARGET_REPO: "git-ci-123/NAAP_PROJECT"
  PROPERTIES_BRANCH: "dev-properties"
  RELEASE_BRANCH: "releasemanagement"
  MANIFEST_BRANCH: "dev-manifest"
  SCRIPT_BRANCH: "dev-script"

jobs:
  liquibase-migration:
    runs-on: naap
    steps:
      - name: Checkout CICD Repository 
        uses: actions/checkout@v4

      - name: Checkout Release Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          token: ${{ secrets.PAT_TOKEN }}    
          ref: ${{ env.RELEASE_BRANCH }}
          path: 'NAAP_Release' 

      - name: Validate Base Path in Releasemanagement Branch
        run: |
          BASE_PATH="${{ github.event.inputs.base_path }}"
          if [ ! -d NAAP_Release/"$BASE_PATH" ]; then
            echo "‚ùå Error: Base path $BASE_PATH not found!"
            exit 1
          fi
          echo "BASE_PATH=NAAP_Release/$BASE_PATH" >> $GITHUB_ENV
          echo "‚úÖ Base path NAAP_Release/$BASE_PATH found."

      - name: Extract Release Folder from [DB] in input.txt
        id: read_input
        run: |
          RELEASE_FOLDER=$(sed -n '/^\[DB\]/ {n; p;}' "$BASE_PATH/input.txt" | tr -d '\r')
          if [ -z "$RELEASE_FOLDER" ]; then
            echo "‚ùå Error: Could not extract release folder!"
            exit 1
          fi
          echo "RELEASE_FOLDER=$RELEASE_FOLDER" >> $GITHUB_ENV
          echo "‚úÖ Extracted release folder: $RELEASE_FOLDER."

      - name: Checkout DB Scripts (db-scripts branch)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_REPO }}
          token: ${{ secrets.PAT_TOKEN }}    
          ref: ${{ env.SCRIPT_BRANCH }}
          path: 'NAAP_DB'

      - name: Validate Release Folder in DB Scripts Branch
        run: |
          DB_SCRIPTS_PATH="NAAP_DB/$RELEASE_FOLDER"
          if [ ! -d "$DB_SCRIPTS_PATH" ]; then
            echo "‚ùå Error: Release folder $RELEASE_FOLDER not found in db-scripts branch!"
            exit 1
          fi
          echo "‚úÖ Release folder $RELEASE_FOLDER found in db-scripts branch."

      - name: Find Changelog Files
        id: find_changelogs
        run: |
          RELEASE_PATH="NAAP_DB/$RELEASE_FOLDER"
          echo "üöÄ Processing release: $RELEASE_FOLDER"

          CHANGELOG_FILES=""
          find "$RELEASE_PATH" -maxdepth 2 -type f -name "*-changelog.xml" | while read -r changelog; do
            SCHEMA_NAME=$(basename "$changelog" | cut -d'-' -f1)  # Extract schema name from filename
            echo "‚úÖ Found changelog for schema: $SCHEMA_NAME -> $changelog"

            # Store schema and changelog in a variable for GitHub Actions
            CHANGELOG_FILES+="$SCHEMA_NAME|$changelog"$'\n'
          done

          if [ -z "$CHANGELOG_FILES" ]; then
            echo "‚ùå Error: No changelog files found!"
            exit 1
          fi

          # Save the changelog file paths to an output
          echo "changelogs<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Run Liquibase Migration for Each Schema
        uses: liquibase/liquibase-github-action@v4
        with:
          operation: "update"
          url: ${{ secrets.DB_DEV_URL }}
          username: ${{ secrets.APPCATALOG_DEV_USER }}
          password: ${{ secrets.APPCATALOG_DEV_PASSWD }}
          changeLogFile: "${{ env.changelogs }}"
