name: Cleanslate Execution - Full Workflow

on:
  workflow_dispatch:
    inputs:
      BASE_PATH:
        description: "Base path for the release folder in releasemanagement"
        required: true
        type: string

permissions:
  contents: write

env:
  PROJECT_REPO: "git-ci-123/NAAP_PROJECT"
  PROPERTIES_BRANCH: "dev-properties"
  RELEASE_BRANCH: "releasemanagement"
  DB_SCRIPTS_BRANCH: "dev-scripts"
  MANIFEST_BRANCH: "dev-manifest"

jobs:
  extract_data:
    runs-on: ubuntu-latest
    outputs:
      imagetag: ${{ steps.extract.outputs.IMAGETAG }}
      db_exists: ${{ steps.check_db.outputs.DB }}
      properties_exists: ${{ steps.check_properties.outputs.PROPERTIES }}
    steps:
      - name: Checkout Release Management Branch
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PROJECT_REPO }}
          ref: ${{ env.RELEASE_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: release
          fetch-depth: 0

      - name: Ensure Latest Files
        run: |
          cd release
          git pull origin ${{ env.RELEASE_BRANCH }}

      - name: Debug Folder Structure
        run: |
          echo "Checking directory structure after checkout:"
          ls -lR release/ || echo "::error:: Release folder does not exist!"

      - name: Validate BASE_PATH
        run: |
          FULL_PATH="${{ inputs.BASE_PATH }}"  # ✅ FIXED
          echo "Checking folder: $FULL_PATH"
          
          if [ ! -d "$FULL_PATH" ]; then
            echo "::error::[ERROR] Release folder does not exist: $FULL_PATH"
            exit 1
          fi
          echo "Release folder '$FULL_PATH' found."

      - name: Extract ImageTag from input.txt
        id: extract
        run: |
          FILE_PATH="${{ inputs.BASE_PATH }}/input.txt"  # ✅ FIXED
          if [[ ! -f "$FILE_PATH" ]]; then
            echo "::error:: input.txt not found in $FILE_PATH"
            exit 1
          fi

          IMAGETAG=$(awk '/\[IMAGETAG\]/ {flag=1; next} /\[DB\]/ {flag=0} flag' "$FILE_PATH" | sed '/^$/d')

          if [[ -z "$IMAGETAG" ]]; then
            echo "::error:: No ImageTag found in input.txt"
            exit 1
          fi

          echo "IMAGETAG<<EOF" >> $GITHUB_ENV
          echo "$IMAGETAG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "Extracted ImageTag:"
          echo "$IMAGETAG"

      - name: Check if DB Scripts Exist
        id: check_db
        run: |
          DB_SCRIPTS_PATH="${{ inputs.BASE_PATH }}/db-scripts"  # ✅ FIXED
          if [ -d "$DB_SCRIPTS_PATH" ] && [ "$(ls -A $DB_SCRIPTS_PATH)" ]; then
            echo "DB=true" >> $GITHUB_OUTPUT
          else
            echo "DB=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if Properties Files Exist
        id: check_properties
        run: |
          PROP_FILES=$(find "${{ inputs.BASE_PATH }}" -maxdepth 1 -type f -name "*.properties" | wc -l)  # ✅ FIXED
          if [ "$PROP_FILES" -gt 0 ]; then
            echo "PROPERTIES=true" >> $GITHUB_OUTPUT
          else
            echo "PROPERTIES=false" >> $GITHUB_OUTPUT
          fi

  process_properties:
    needs: extract_data
    runs-on: ubuntu-latest
    if: needs.extract_data.outputs.properties_exists == 'true'
    steps:
      - name: Checkout Properties Branch
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PROJECT_REPO }}
          ref: ${{ env.PROPERTIES_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Process Property File Changes
        run: |
          LOG_FILE="property_changes.log"
          FULL_PATH="${{ inputs.BASE_PATH }}"  # ✅ FIXED
          echo "Processing property file changes from $FULL_PATH..." > "$LOG_FILE"

          find "$FULL_PATH" -maxdepth 1 -type f -name "*.properties" || { echo "::error:: No properties files found!"; exit 1; }

  deploy_application:
    needs: extract_data
    runs-on: ubuntu-latest
    if: needs.extract_data.outputs.imagetag != ''
    steps:
      - name: Checkout Dev Manifest
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PROJECT_REPO }}
          ref: ${{ env.MANIFEST_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Kubernetes Manifests
        run: |
          echo "Updating manifests using extracted ImageTag..."
          echo "$IMAGETAG" | while read IMAGE; do
            [[ -z "$IMAGE" ]] && continue
            SERVICE=$(echo $IMAGE | cut -d'_' -f1)
            TAG=$(echo $IMAGE | cut -d'_' -f2)
            YAML_FILE="manifest/${SERVICE}.yaml"
            
            if [ -f "$YAML_FILE" ]; then
              echo "Updating $YAML_FILE with image tag $TAG"
              sed -i "s|{{imagetag}}|$TAG|g" "$YAML_FILE"
            else
              echo "::warning:: YAML file not found for service: $SERVICE"
            fi
          done

      - name: Apply Manifests
        run: kubectl apply -f manifest/
