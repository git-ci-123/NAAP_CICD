name: Cleanslate Execution
 
on:
  workflow_dispatch:
    inputs:
      release:
        description: "Release Path"
        required: true
        type: string
permissions:
  contents: write
env:
  TARGET_REPO: "git-ci-123/NAAP_PROJECT"  # Change to your actual repo
  PROPERTIES_BRANCH: "dev-properties"   # Branch where property files are stored
  RELEASE_BRANCH: "releasemanagement" # Branch where the release folder is stored
  
jobs:
  checkout:
    runs-on: naap
    outputs:
      iteration: ${{ steps.extract.outputs.ITERATION }}
      imagetag: ${{ steps.extract.outputs.IMAGETAG }}
      db: ${{ steps.extract.outputs.DB }}
      property: ${{ steps.check_properties.outputs.property }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
 
      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          repository: 'git-ci-123/NAAP_PROJECT'
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: releasemanagement
          path: 'NAAP_Release'
 
      - name: Read Inputs from File
        id: extract
        run: |
          RELEASE_VERSION=${{ inputs.release }}
          FILE_PATH="NAAP_Release/${RELEASE_VERSION}/input.txt"
 
          if [ ! -f "$FILE_PATH" ]; then
            echo "File not found: $FILE_PATH"
          fi
 
          ITERATION=$(awk '/\[ITERATION\]/{getline; print}' $FILE_PATH | tr -d '[:space:]')
          IMAGETAG=$(awk '/\[IMAGETAG\]/ {flag=1; next} /\[DB\]/ {flag=0} flag' $FILE_PATH | tr '\n' ',' | sed 's/,$//')
          DB=$(awk '/\[DB\]/{getline; print}' $FILE_PATH | tr -d '[:space:]')
 
          echo "ITERATION=$ITERATION" >> $GITHUB_OUTPUT
          echo "IMAGETAG=$IMAGETAG" >> $GITHUB_OUTPUT
          echo "DB=$DB" >> $GITHUB_OUTPUT
 
      - name: Check for Properties Files
        id: check_properties
        run: |
          PROP_FILES=$(find NAAP_Release/${{ inputs.release }} -type f -name "*.properties" | wc -l)
          if [ "$PROP_FILES" -gt 0 ]; then
            echo "property=true" >> $GITHUB_OUTPUT
          else
            echo "property=false" >> $GITHUB_OUTPUT
          fi
 
  DB_Execution:
    needs: checkout
    runs-on: naap
    if: ${{ needs.checkout.outputs.db != '' }}
    steps:
      - name: Check RDS Instance Connection
        run: |
          sudo apt-get update && sudo apt-get install -y telnet
           if telnet naapdev.cric42eckumc.us-east-2.rds.amazonaws.com 1521; then
             echo "Connection successful!"
          else
            echo "Connection failed!"
            exit 1
          fi
 
  Property_Deployment:
    needs: DB_Execution
    runs-on: naap
    if: ${{ always() && needs.checkout.outputs.property == 'true' }}
    steps:
      - name: Process Property File Changes
        run: |
             curl -X POST -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                   https://api.github.com/repos/git-ci-123/NAAP_CICD/actions/workflows/property-update.yml/dispatches  \
                   -d '{"ref":"dev-cicd"}'
            
 
  Application_Deployment:
    needs: 
      - checkout
      - DB_Execution
      - Property_Deployment
    runs-on: naap
    if: ${{ always() && needs.checkout.outputs.imagetag != '' }}

    permissions:
      id-token: write 
      contents: read
      
    steps:
      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          repository: 'git-ci-123/NAAP_PROJECT'
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: dev-manifest
          path: 'NAAP_Manifest'

      - name: Request OIDC Token
        run: |
          echo "Fetching OIDC Token..."
          curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL"

      - name: Configure AWS Account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::692859914710:role/GitHubActionsEKSRole
          aws-region: us-east-2
 
      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name naapdev --region us-east-2
        
      - name: Replace Image Tags in Kubernetes Manifests (No Commit)
        run: |
          IFS=',' read -r -a IMAGES <<< "${{ needs.read-inputs.outputs.imagetag }}"

          for IMAGE in "${IMAGES[@]}"; do
            SERVICE=$(echo $IMAGE | cut -d'_' -f1)  # Extract service name (cas, catalog, eureka)
            TAG=$(echo $IMAGE | cut -d'_' -f2)      # Extract tag (v1, v2, etc.)

            YAML_FILE="manifest/${SERVICE}.yaml"

            if [ -f "$YAML_FILE" ]; then
              echo "Updating $YAML_FILE with image tag $TAG"
              sed -i "s|{{imagetag}}|${TAG}|g" "$YAML_FILE"
            else
              echo "Warning: YAML file not found for $SERVICE"
            fi
          done

      - name: Apply Kubernetes Manifests
        run: |
          IFS=',' read -r -a IMAGES <<< "${{ needs.read-inputs.outputs.imagetag }}"
          for IMAGE in "${IMAGES[@]}"; do
            SERVICE=$(echo $IMAGE | cut -d'_' -f1)
            YAML_FILE="manifest/${SERVICE}.yaml"
            if [ -f "$YAML_FILE" ]; then
              kubectl apply -f "$YAML_FILE"
            fi
          done
